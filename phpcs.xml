<?xml version="1.0"?>
<ruleset name="StrictPSR12" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="vendor/squizlabs/php_codesniffer/phpcs.xsd">
    <description>Strict PSR12 code style standard</description>

    <arg name="basepath" value="."/>
    <arg name="cache" value=".phpcs-cache"/>
    <arg name="colors"/>

    <rule ref="PSR12">
        <exclude name="Squiz.WhiteSpace.ControlStructureSpacing.SpacingAfterOpen"/>
        <exclude name="Squiz.WhiteSpace.ControlStructureSpacing.SpacingBeforeClose"/>
        <exclude name="PSR12.Functions.ReturnTypeDeclaration"/>
    </rule>

    <rule ref="Generic.Files.LineLength">
        <exclude name="Generic.Files.LineLength.TooLong"/>
    </rule>

    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>
    <rule ref="Generic.PHP.DisallowShortOpenTag">
        <exclude name="Generic.PHP.DisallowShortOpenTag.EchoFound"/>
    </rule>
    <!--    <rule ref="Generic.Files.InlineHTML"/>-->
    <!--    <rule ref="Generic.PHP.DeprecatedFunctions"/>-->
    <!--    <rule ref="Generic.PHP.BacktickOperator"/>-->
    <!--    <rule ref="Generic.PHP.DiscourageGoto"/>-->
    <!--    <rule ref="Squiz.PHP.GlobalKeyword"/>-->
    <!--    <rule ref="Generic.PHP.SAPIUsage"/>-->
    <!--    <rule ref="Generic.PHP.ForbiddenFunctions">-->
    <!--        <properties>-->
    <!--            <property name="forbiddenFunctions" type="array">-->
    <!--                <element key="chop" value="rtrim"/>-->
    <!--                <element key="close" value="closedir"/>-->
    <!--                <element key="compact" value="null"/>-->
    <!--                <element key="delete" value="unset"/>-->
    <!--                <element key="doubleval" value="floatval"/>-->
    <!--                <element key="extract" value="null"/>-->
    <!--                <element key="fputs" value="fwrite"/>-->
    <!--                <element key="ini_alter" value="ini_set"/>-->
    <!--                <element key="is_double" value="is_float"/>-->
    <!--                <element key="is_integer" value="is_int"/>-->
    <!--                <element key="is_long" value="is_int"/>-->
    <!--                <element key="is_null" value="null"/>-->
    <!--                <element key="is_real" value="is_float"/>-->
    <!--                <element key="is_writeable" value="is_writable"/>-->
    <!--                <element key="join" value="implode"/>-->
    <!--                <element key="key_exists" value="array_key_exists"/>-->
    <!--                <element key="pos" value="current"/>-->
    <!--                <element key="settype" value="null"/>-->
    <!--                <element key="show_source" value="highlight_file"/>-->
    <!--                <element key="sizeof" value="count"/>-->
    <!--                <element key="strchr" value="strstr"/>-->
    <!--            </property>-->
    <!--        </properties>-->
    <!--    </rule>-->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

    <!--    <rule ref="Squiz.PHP.NonExecutableCode"/>-->
    <!--    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>-->

    <!--    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>-->

    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <!-- But multiline is useful for readability -->
        <properties>
            <property name="allowMultiline" value="true"/>
        </properties>
    </rule>
    <!-- The short array syntax MUST be used to define arrays. -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <!-- All values in multiline arrays must be indented with 4 spaces. -->
    <rule ref="Generic.Arrays.ArrayIndent"/>


    <!--    <rule ref="Generic.Classes.DuplicateClassName"/>-->
    <!--    &lt;!&ndash; The file name MUST match the case of the terminating class name. &ndash;&gt;-->
    <!--    <rule ref="Squiz.Classes.ClassFileName"/>-->
    <!--    &lt;!&ndash; PHP 4 style constructors MUST NOT be used. &ndash;&gt;-->
    <!--    <rule ref="Generic.NamingConventions.ConstructorName"/>-->
    <!--    &lt;!&ndash; Abstract classes MUST have a `Abstract` prefix. &ndash;&gt;-->

    <!-- The pseudo-variable `$this` MUST NOT be called inside a static method
         or function. -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>

        <!-- The final keyword on methods MUST be omitted in final classes. -->
        <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>

        <!-- Statements MUST NOT be empty, except for catch statements. -->
        <rule ref="Generic.CodeAnalysis.EmptyStatement">
            <!-- But allow empty catch -->
            <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"/>
        </rule>

    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>
    <!--    &lt;!&ndash; There MUST NOT be any white space around the object operator UNLESS-->
    <!--         multilines are used. &ndash;&gt;-->
    <!--    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>-->
    <!--    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">-->
    <!--        <properties>-->
    <!--            <property name="ignoreNewlines" value="true"/>-->
    <!--        </properties>-->
    <!--    </rule>-->

    <!-- The `&&` and `||` operators SHOULD be used instead of `and` and `or`. -->
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>

    <!--    &lt;!&ndash; There MUST be one whitespace after a type casting operator. &ndash;&gt;-->
    <!--    <rule ref="Generic.Formatting.SpaceAfterCast"/>-->
    <!--    &lt;!&ndash; There MUST be one whitespace after unary not. &ndash;&gt;-->
    <!--    <rule ref="Generic.Formatting.SpaceAfterNot"/>-->

    <!--    <rule ref="PEAR.Commenting.InlineComment"/>-->
    <!--    <rule ref="Squiz.Commenting.FunctionComment">-->
    <!--        &lt;!&ndash; Allow `@throws` without description &ndash;&gt;-->
    <!--        <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows"/>-->
    <!--        &lt;!&ndash; Does not work properly with PHP 7 / short-named types &ndash;&gt;-->
    <!--        <exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName"/>-->
    <!--        &lt;!&ndash; Does not support collections, i.e. `string[]` &ndash;&gt;-->
    <!--        <exclude name="Squiz.Commenting.FunctionComment.IncorrectTypeHint"/>-->
    <!--        &lt;!&ndash; Forces incorrect types &ndash;&gt;-->
    <!--        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturn"/>-->
    <!--        &lt;!&ndash; Breaks with compound return types, i.e. `string|null` &ndash;&gt;-->
    <!--        <exclude name="Squiz.Commenting.FunctionComment.InvalidReturnNotVoid"/>-->
    <!--        &lt;!&ndash; Breaks when all params are not documented &ndash;&gt;-->
    <!--        <exclude name="Squiz.Commenting.FunctionComment.InvalidTypeHint"/>-->
    <!--        &lt;!&ndash; Doc comment is not required for every method &ndash;&gt;-->
    <!--        <exclude name="Squiz.Commenting.FunctionComment.Missing"/>-->
    <!--        &lt;!&ndash; Do not require comments for `@param` &ndash;&gt;-->
    <!--        <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>-->
    <!--        &lt;!&ndash; Do not require `@param` for all parameters &ndash;&gt;-->
    <!--        <exclude name="Squiz.Commenting.FunctionComment.MissingParamTag"/>-->
    <!--        &lt;!&ndash; Do not require `@return` for void methods &ndash;&gt;-->
    <!--        <exclude name="Squiz.Commenting.FunctionComment.MissingReturn"/>-->
    <!--        &lt;!&ndash; Comments don't have to be sentences &ndash;&gt;-->
    <!--        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop"/>-->
    <!--        &lt;!&ndash; Comments don't have to be sentences &ndash;&gt;-->
    <!--        <exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital"/>-->
    <!--        &lt;!&ndash; Breaks when all params are not documented &ndash;&gt;-->
    <!--        <exclude name="Squiz.Commenting.FunctionComment.ParamNameNoMatch"/>-->
    <!--        &lt;!&ndash; Doesn't respect inheritance &ndash;&gt;-->
    <!--        <exclude name="Squiz.Commenting.FunctionComment.ScalarTypeHintMissing"/>-->
    <!--        &lt;!&ndash; Throws comments can start without a capital and doesn't need a full stop &ndash;&gt;-->
    <!--        <exclude name="PEAR.Commenting.FunctionComment.ThrowsNoFullStop"/>-->
    <!--        <exclude name="PEAR.Commenting.FunctionComment.ThrowsNotCapital"/>-->
    <!--        &lt;!&ndash; Doesn't work with self as typehint &ndash;&gt;-->
    <!--        <exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing"/>-->
    <!--    </rule>-->

    <!-- The asterisks in a DocBlock should align, and there should be one
         space between the asterisk and tag. -->
    <rule ref="Squiz.Commenting.DocCommentAlignment">
        <exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar"/>
    </rule>

    <rule ref="Generic.WhiteSpace.ScopeIndent"/>
    <rule ref="PSR2.Methods.FunctionCallSignature.Indent"/>
    <rule ref="PSR2.Methods.FunctionCallSignature.OpeningIndent"/>
    <rule ref="Squiz.WhiteSpace.ScopeClosingBrace.Indent"/>

    <!-- Property name "$_rateTime" should not be prefixed with an underscore to indicate visibility -->
    <rule ref="PSR2.Classes.PropertyDeclaration.Underscore"/>

    <!-- Visibility must be declared on all constants if your project supports PHP 7.1 or later -->
    <rule ref="PSR12.Properties.ConstantVisibility.NotFound"/>

    <!-- String concat is not required here; use a single string instead -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat"/>

    <!-- Arguments with default values must be at the end of the argument list -->
    <rule ref="PEAR.Functions.ValidDefaultValue"/>

    <!-- Closing brace of array declaration must be on a new line -->
    <rule ref="Generic.Arrays.ArrayIndent.CloseBraceNotNewLine"/>

    <rule ref="PSR1.Files.SideEffects"/>

    <!-- Ignore for migrations. -->
    <!-- Ignore missing namespace for migrations -->
    <rule ref="PSR1.Classes.ClassDeclaration.MissingNamespace">
        <exclude-pattern>m\d{6}_\d{6}_.+\.php$</exclude-pattern>
    </rule>
    <!-- Ignore camel caps format for class name of migrations -->
    <rule ref="Squiz.Classes.ValidClassName.NotCamelCaps">
        <exclude-pattern>m\d{6}_\d{6}_.+\.php$</exclude-pattern>
    </rule>
    <!-- Ignore no camel caps format for methods name -->
    <rule ref="PSR1.Methods.CamelCapsMethodName.NotCamelCaps">
        <exclude-pattern>*</exclude-pattern>
    </rule>
    <exclude-pattern>vendor/*</exclude-pattern>
    <exclude-pattern>tests/*</exclude-pattern>

    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <exclude-pattern>*/tests/unit/*</exclude-pattern>
    </rule>

    <rule ref="PSR1.Files.SideEffects.FoundWithSymbols"/>
    <!-- File appears to be minified and cannot be processed -->
    <exclude-pattern>*.js</exclude-pattern>
    <exclude-pattern>*.css</exclude-pattern>
    <exclude-pattern>*.json</exclude-pattern>
    <exclude-pattern>*.json</exclude-pattern>
    <exclude-pattern>/_my/*</exclude-pattern>
    <exclude-pattern>/_design/*</exclude-pattern>
    <exclude-pattern>/_temp/*</exclude-pattern>
    <exclude-pattern>/_vendors/*</exclude-pattern>
    <exclude-pattern>/_vendors/*</exclude-pattern>
    <exclude-pattern>/wep/_vendors/*</exclude-pattern>
</ruleset>
